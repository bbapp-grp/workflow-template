name: Go Development Build

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of the microservice (defaults to repository name)'
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      dockerfile_path:
        description: 'Path to Dockerfile relative to repo root'
        required: false
        type: string
        default: 'Dockerfile'
      build_context:
        description: 'Build context directory'
        required: false
        type: string
        default: '.'
      version:
        description: 'Version to pass to the build (defaults to develop-{SHA})'
        required: false
        type: string
        default: ''
      gcp_project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      artifact_registry_region:
        description: 'Artifact Registry region'
        required: false
        type: string
        default: 'us-central1'
      artifact_registry_repo:
        description: 'Artifact Registry repository name'
        required: false
        type: string
        default: 'bbapp-microservices'
    secrets:
      WIF_PROVIDER:
        description: 'Workload Identity Federation Provider'
        required: true
      WIF_SERVICE_ACCOUNT:
        description: 'Workload Identity Federation Service Account'
        required: true
    outputs:
      image_tag:
        description: 'The full image tag that was built and pushed'
        value: ${{ jobs.build.outputs.image_tag }}
      image_digest:
        description: 'The image digest'
        value: ${{ jobs.build.outputs.image_digest }}
      version:
        description: 'The version that was used for the build'
        value: ${{ jobs.build.outputs.version }}

env:
  REGISTRY: ${{ inputs.artifact_registry_region }}-docker.pkg.dev
  IMAGE_NAME: ${{ inputs.gcp_project_id }}/${{ inputs.artifact_registry_repo }}/${{ inputs.service_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="develop-${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker ${{ env.REGISTRY }} --quiet
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            network=host

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=develop-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.run_id }}
            VERSION=${{ steps.version.outputs.version }}

      - name: Output image details
        run: |
          echo "🚀 Go development build completed!"
          echo "📦 Image tags: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Digest: ${{ steps.build.outputs.digest }}"
          echo "🏷️  Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "📝 Version: ${{ steps.version.outputs.version }}"
          echo "📝 All build logic handled in Dockerfile"
