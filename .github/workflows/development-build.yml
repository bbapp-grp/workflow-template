name: Development Build and Push

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of the microservice'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile relative to repo root'
        required: false
        type: string
        default: 'Dockerfile'
      build_context:
        description: 'Build context directory'
        required: false
        type: string
        default: '.'
      gcp_project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      artifact_registry_region:
        description: 'Artifact Registry region'
        required: false
        type: string
        default: 'us-central1'
      artifact_registry_repo:
        description: 'Artifact Registry repository name'
        required: false
        type: string
        default: 'bbapp-microservices'
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      enable_tests:
        description: 'Whether to run tests before building'
        required: false
        type: boolean
        default: true
      test_command:
        description: 'Command to run tests'
        required: false
        type: string
        default: 'npm test'
      build_command:
        description: 'Command to build the application (if needed before Docker)'
        required: false
        type: string
        default: ''
    secrets:
      WIF_PROVIDER:
        description: 'Workload Identity Federation Provider'
        required: true
      WIF_SERVICE_ACCOUNT:
        description: 'Workload Identity Federation Service Account'
        required: true
    outputs:
      image_tag:
        description: 'The full image tag that was built and pushed'
        value: ${{ jobs.build.outputs.image_tag }}
      image_digest:
        description: 'The image digest'
        value: ${{ jobs.build.outputs.image_digest }}

env:
  REGISTRY: ${{ inputs.artifact_registry_region }}-docker.pkg.dev
  IMAGE_NAME: ${{ inputs.gcp_project_id }}/${{ inputs.artifact_registry_repo }}/${{ inputs.service_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (if needed)
        if: ${{ inputs.enable_tests == true || inputs.build_command != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'npm'

      - name: Install dependencies (if needed)
        if: ${{ inputs.enable_tests == true || inputs.build_command != '' }}
        run: npm ci

      - name: Run tests
        if: ${{ inputs.enable_tests == true }}
        run: ${{ inputs.test_command }}

      - name: Run build command
        if: ${{ inputs.build_command != '' }}
        run: ${{ inputs.build_command }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image details
        run: |
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "Image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
