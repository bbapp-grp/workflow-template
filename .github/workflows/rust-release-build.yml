name: Rust Release Build

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of the microservice (defaults to repository name)'
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      dockerfile_path:
        description: 'Path to Dockerfile relative to repo root'
        required: false
        type: string
        default: 'Dockerfile'
      build_context:
        description: 'Build context directory'
        required: false
        type: string
        default: '.'
      gcp_project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      artifact_registry_region:
        description: 'Artifact Registry region'
        required: false
        type: string
        default: 'asia-south1'
      artifact_registry_repo:
        description: 'Artifact Registry repository name'
        required: false
        type: string
        default: 'bbapp-images'
      tag_prefix:
        description: 'Prefix for version tags'
        required: false
        type: string
        default: 'v'
    secrets:
      WIF_PROVIDER:
        description: 'Workload Identity Federation Provider'
        required: true
      WIF_SERVICE_ACCOUNT:
        description: 'Workload Identity Federation Service Account'
        required: true
    outputs:
      version_tag:
        description: 'The version tag that was created'
        value: ${{ jobs.release.outputs.version_tag }}
      image_tag:
        description: 'The full image tag that was built and pushed'
        value: ${{ jobs.build.outputs.image_tag }}
      image_digest:
        description: 'The image digest'
        value: ${{ jobs.build.outputs.image_digest }}

env:
  REGISTRY: ${{ inputs.artifact_registry_region }}-docker.pkg.dev
  IMAGE_NAME: ${{ inputs.gcp_project_id }}/${{ inputs.artifact_registry_repo }}/${{ inputs.service_name }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

  release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate CalVer version
        id: version
        run: |
          # Generate CalVer format: YY.MM.PATCH
          YEAR=$(date +%y)
          MONTH=$(date +%m)
          
          # Get the number of commits today to use as patch version
          PATCH=$(date +%d%H%M)
          
          VERSION="${YEAR}.${MONTH}.${PATCH}"
          VERSION_TAG="${{ inputs.tag_prefix }}${VERSION}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          echo "Version tag: ${VERSION_TAG}"

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.version.outputs.version_tag }}" -m "Release ${{ steps.version.outputs.version_tag }} [skip ci]"
          git push origin "${{ steps.version.outputs.version_tag }}"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version_tag }}
          release_name: Release ${{ steps.version.outputs.version_tag }}
          body: |
            ðŸš€ **${{ inputs.service_name }} Release ${{ steps.version.outputs.version_tag }}**
            
            **Changes in this release:**
            - Automated CalVer release from main branch
            - Built from commit: ${{ github.sha }}
            
            **Docker Image:**
            ```
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ```
            
            **Deployment:**
            This release is automatically deployed to the staging environment.
          draft: false
          prerelease: false

  build:
    needs: [test, release]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            network=host

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.release.outputs.version_tag }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.release.outputs.version_tag }}
            BUILDTIME=${{ github.run_id }}
            GITHUB_SHA=${{ github.sha }}
            GITHUB_REF=${{ github.ref }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "Image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
